# This workflow will install Python dependencies, run tests and lint with a
# variety of Python versions. For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Flake8 and Unittest

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.11", "3.12", "3.13"]
        numpy_ver: ["latest"]
        test_config: ["standard"]
        include:
          # NEP29 compliance settings
          - python-version: "3.10"
            numpy_ver: "1.25"
            os: ubuntu-latest
            test_config: "NEP29"
          # Apexpy integration settings
          - python-version: "3.11"
            numpy_ver: "latest"
            os: ubuntu-latest
            test_config: "apexpy"

    name: Test ${{ matrix.test_config }} using Python ${{ matrix.python-version }} on ${{ matrix.os }} with numpy ${{ matrix.numpy_ver }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install standard dependencies
      if: ${{ matrix.test_config != 'NEP29'}}
      run: pip install .[test]

    - name: Install NEP29 dependencies
      if: ${{ matrix.test_config == 'NEP29'}}
      run: |
        pip install numpy==${{ matrix.numpy_ver }}
        pip install --upgrade-strategy only-if-needed .[test]

    - name: Install apexpy extras
      if: ${{ matrix.test_config == 'apexpy' }}
      run: pip install .[apexpy]

    - name: Test PEP8 compliance
      run: flake8 . --count --select=D,E,F,H,W --show-source --statistics

    - name: Evaluate complexity
      run: flake8 . --count --exit-zero --max-complexity=10 --statistics

    - name: Run unit and integration tests
      run:  |
        coverage run --rcfile=pyproject.toml -m unittest discover
        coverage report
        coverage xml --rcfile=pyproject.toml

    - name: Coveralls Parallel
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run=${{ join(matrix.*, '-') }}
        parallel: true
        format: cobertura
        debug: true

  finish:
    name: Finish Coverage Analysis
    needs: build
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
